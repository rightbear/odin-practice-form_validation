{"version":3,"file":"main.js","mappings":"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","sources":["webpack://odin-practice-form_validation/webpack/bootstrap","webpack://odin-practice-form_validation/webpack/runtime/global","webpack://odin-practice-form_validation/webpack/runtime/publicPath","webpack://odin-practice-form_validation/./src/function/DOMControl.js","webpack://odin-practice-form_validation/./src/item/formPage.js","webpack://odin-practice-form_validation/./src/function/pageLogic.js","webpack://odin-practice-form_validation/./src/function/eventHandler.js","webpack://odin-practice-form_validation/./src/index.js","webpack://odin-practice-form_validation/./src/item/validPage.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { createValidForm } from \"../item/formPage\";\nimport { createValidPage } from \"../item/validPage\";\nimport postCodeData from \"../item/postalCodes.json\" with { type: \"json\" };\n\n// Load initial layout on the page\nexport function loadInitialLayout() {\n  const main = document.createElement(\"div\");\n  main.classList.add(\"main\");\n  document.body.appendChild(main);\n\n  const content = document.createElement(\"div\");\n  content.classList.add(\"content\");\n  main.appendChild(content);\n}\n\n// Load options of the selection for countries on the form\nfunction addCountryOption() {\n  const countrySelect = document.querySelector(\"#user_country\");\n\n  postCodeData.forEach((countryInfo) => {\n    const countryOption = document.createElement(\"option\");\n    countryOption.textContent = countryInfo[\"Country\"];\n    countrySelect.appendChild(countryOption);\n  });\n}\n\n// Clear all elements on the page\nfunction clearContent() {\n  const content = document.querySelector(\".content\");\n\n  while (content.firstChild) {\n    content.removeChild(content.firstChild);\n  }\n}\n\n// Load form for validation on the page\nexport function loadFormPage() {\n  clearContent();\n  createValidForm();\n  addCountryOption();\n}\n\n// Load result of validation on the page\nexport function loadValidPage() {\n  clearContent();\n  createValidPage();\n}\n","export function createValidForm() {\n  const content = document.querySelector(\".content\");\n\n  const validForm = document.createElement(\"form\");\n  validForm.id = \"validForm\";\n  validForm.noValidate = true;\n\n  const formHeader = document.createElement(\"h1\");\n  formHeader.textContent = \"Validate Me\";\n\n  const emailField = document.createElement(\"div\");\n  emailField.id = \"emailField\";\n  const emailLabel = document.createElement(\"label\");\n  emailLabel.setAttribute(\"for\", \"user_email\");\n  emailLabel.textContent = \"Email Address (Required)\";\n  const emailInput = document.createElement(\"input\");\n  emailInput.type = \"email\";\n  emailInput.name = \"email\";\n  emailInput.id = \"user_email\";\n  emailInput.placeholder = 'Input your email address, like \"example@email.com\"';\n  emailInput.autocomplete = \"on\";\n  emailInput.required = true;\n  const emailMessage = document.createElement(\"span\");\n  emailMessage.classList.add(\"validationMsg\");\n  emailField.append(emailLabel, emailInput, emailMessage);\n\n  const countryField = document.createElement(\"div\");\n  countryField.id = \"countryField\";\n  const countryLabel = document.createElement(\"label\");\n  countryLabel.setAttribute(\"for\", \"user_country\");\n  countryLabel.textContent = \"Country (Required)\";\n  const countrySelect = document.createElement(\"select\");\n  countrySelect.name = \"country\";\n  countrySelect.id = \"user_country\";\n  countrySelect.autocomplete = \"on\";\n  countrySelect.required = true;\n  const countrySelectOptText = document.createElement(\"option\");\n  countrySelectOptText.value = \"\";\n  countrySelectOptText.disabled = true;\n  countrySelectOptText.selected = true;\n  countrySelectOptText.textContent = \"Click to select your country\";\n  countrySelect.appendChild(countrySelectOptText);\n  const countryMessage = document.createElement(\"span\");\n  countryMessage.classList.add(\"validationMsg\");\n  countryField.append(countryLabel, countrySelect, countryMessage);\n\n  const postalCodeField = document.createElement(\"div\");\n  postalCodeField.id = \"postalCodeField\";\n  const postalCodeLabel = document.createElement(\"label\");\n  postalCodeLabel.setAttribute(\"for\", \"user_postalCode\");\n  postalCodeLabel.textContent = \"Postal Code (Required)\";\n  const postalCodeInput = document.createElement(\"input\");\n  postalCodeInput.type = \"text\";\n  postalCodeInput.name = \"postalCode\";\n  postalCodeInput.id = \"user_postalCode\";\n  postalCodeInput.autocomplete = \"on\";\n  postalCodeInput.required = true;\n  postalCodeInput.disabled = true;\n  postalCodeInput.placeholder =\n    \"The field is disbaled if selected country has no postal-code\";\n  const postalCodeMessage = document.createElement(\"span\");\n  postalCodeMessage.classList.add(\"validationMsg\");\n  postalCodeField.append(postalCodeLabel, postalCodeInput, postalCodeMessage);\n\n  const passwordField = document.createElement(\"div\");\n  passwordField.id = \"passwordField\";\n  const passwordLabel = document.createElement(\"label\");\n  passwordLabel.setAttribute(\"for\", \"user_password\");\n  passwordLabel.textContent = \"Password (Required)\";\n  const passwordInput = document.createElement(\"input\");\n  passwordInput.type = \"password\";\n  passwordInput.name = \"password\";\n  passwordInput.id = \"user_password\";\n  passwordInput.minLength = 8;\n  passwordInput.maxLength = 20;\n  passwordInput.setAttribute(\n    \"pattern\",\n    \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@$!%*?&])[A-Za-z0-9@$!%*?&]{8,20}$\",\n  );\n  passwordInput.autocomplete = \"on\";\n  passwordInput.required = true;\n  passwordInput.placeholder = \"Enter your password\";\n  const passwordMessage = document.createElement(\"span\");\n  passwordMessage.classList.add(\"validationMsg\");\n  passwordField.append(passwordLabel, passwordInput, passwordMessage);\n\n  const confirmField = document.createElement(\"div\");\n  confirmField.id = \"confirmField\";\n  const confirmLabel = document.createElement(\"label\");\n  confirmLabel.setAttribute(\"for\", \"user_confirm\");\n  confirmLabel.textContent = \"Confirm Password\";\n  const confirmInput = document.createElement(\"input\");\n  confirmInput.type = \"password\";\n  confirmInput.name = \"confirm\";\n  confirmInput.id = \"user_confirm\";\n  confirmInput.autocomplete = \"on\";\n  confirmInput.required = true;\n  confirmInput.placeholder = \"Reenter the same password as above\";\n  const confirmMessage = document.createElement(\"span\");\n  confirmMessage.classList.add(\"validationMsg\");\n  confirmField.append(confirmLabel, confirmInput, confirmMessage);\n\n  const buttonSet = document.createElement(\"div\");\n  buttonSet.id = \"buttonSet\";\n  const submitBtn = document.createElement(\"button\");\n  submitBtn.type = \"submit\";\n  submitBtn.id = \"submitBtn\";\n  submitBtn.value = \"submit\";\n  submitBtn.autofocus = true;\n  submitBtn.textContent = \"Submit\";\n  const resetBtn = document.createElement(\"button\");\n  resetBtn.type = \"reset\";\n  resetBtn.id = \"resetBtn\";\n  resetBtn.value = \"reset\";\n  resetBtn.textContent = \"Reset\";\n  buttonSet.append(submitBtn, resetBtn);\n\n  validForm.append(\n    formHeader,\n    emailField,\n    countryField,\n    postalCodeField,\n    passwordField,\n    confirmField,\n    buttonSet,\n  );\n\n  content.appendChild(validForm);\n}\n","import postCodeData from \"../item/postalCodes.json\" with { type: \"json\" };\nimport messageData from \"../item/invaldMessage.json\" with { type: \"json\" };\n\n// Compare th password confirmation field with the original password field\nexport function comparePassword(fieldElement) {\n  if (fieldElement.id === \"user_confirm\") {\n    const passwordValue = document.querySelector(`#user_password`).value;\n    if (fieldElement.value !== passwordValue) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// If fields on the form cannot pass the validation, display error message\nfunction showError(fieldElement, fieldMessage) {\n  if (fieldElement.validity.valueMissing) {\n    // If it's empty\n    fieldMessage.textContent = messageData[`${fieldElement.name}`][\"required\"];\n  } else if (fieldElement.validity.typeMismatch) {\n    // If it's not a valid data type\n    fieldMessage.textContent = messageData[`${fieldElement.name}`][\"type\"];\n  } else if (fieldElement.validity.tooShort || fieldElement.validity.tooLong) {\n    // If the value is too short or too long\n    fieldMessage.textContent = messageData[`${fieldElement.name}`][\"length\"];\n  } else if (fieldElement.validity.patternMismatch) {\n    // If the value doesn't match the pattern\n    fieldMessage.textContent = messageData[`${fieldElement.name}`][\"pattern\"];\n\n    if (fieldElement.id === \"user_postalCode\") {\n      const selectedCountry = document.querySelector(\"#user_country\");\n      const countryID = selectedCountry.selectedIndex;\n\n      fieldMessage.textContent += `${postCodeData[countryID - 1][\"Format\"]}. ('N' mainly means number)`;\n    }\n  } else {\n    fieldMessage.textContent = \"Unknown reason to fail\";\n  }\n\n  if (!comparePassword(fieldElement)) {\n    // If the confirm password is wrong\n    fieldMessage.textContent = messageData[`${fieldElement.name}`][\"mismatch\"];\n  }\n\n  // Removes the `Valid` class and add the `Invalid` class in the fieldElement\n  fieldElement.classList.remove(\"validField\");\n  fieldElement.classList.add(\"invalidField\");\n\n  // Removes the `Valid` class and add the `Invalid` class in the fieldMessage\n  fieldMessage.classList.remove(\"validMsg\");\n  fieldMessage.classList.add(\"invalidMsg\");\n}\n\n// If fields on the form can pass the validation, display success message\nfunction showCorrect(fieldElement, fieldMessage) {\n  // If the value is checkedand passed\n  fieldMessage.textContent = messageData[`${fieldElement.name}`][\"correct\"];\n\n  // Removes `invalid` class and add the `valid` class in the fieldElement\n  fieldElement.classList.remove(\"invalidField\");\n  fieldElement.classList.add(\"validField\");\n\n  // Removes the `invalid` class and add the `valid` class in the fieldMessage\n  fieldMessage.classList.remove(\"invalidMsg\");\n  fieldMessage.classList.add(\"validMsg\");\n}\n\n// Show messages under the fields based on the validation result\nexport function showMessage(fieldElement, fieldMessage) {\n  if (fieldElement.id === \"user_postalCode\") {\n    const selectedCountry = document.querySelector(\"#user_country\");\n    const countryID = selectedCountry.selectedIndex;\n\n    fieldElement.setAttribute(\"pattern\", postCodeData[countryID - 1][\"Regex\"]);\n  }\n\n  if (!fieldElement.validity.valid || !comparePassword(fieldElement)) {\n    showError(fieldElement, fieldMessage);\n  } else {\n    showCorrect(fieldElement, fieldMessage);\n  }\n}\n\n// Clear all values in the fields and validation result messages under the fields\nexport function resetField(fieldElement, fieldMessage) {\n  if (\n    fieldElement.id === \"user_email\" ||\n    fieldElement.id === \"user_password\" ||\n    fieldElement.id === \"user_confirm\"\n  ) {\n    fieldElement.value = \"\";\n  } else if (fieldElement.id === \"user_country\") {\n    fieldElement.options[0].selected = true;\n  } else if (fieldElement.id === \"user_postalCode\") {\n    fieldElement.value = \"\";\n    fieldElement.disabled = true;\n    fieldElement.placeholder =\n      \"The field is disbaled if selected country has no postal-code\";\n  }\n  fieldElement.classList.remove(\"validField\");\n  fieldElement.classList.remove(\"invalidField\");\n\n  fieldMessage.textContent = \"\";\n  fieldMessage.classList.remove(\"validMsg\", \"invalidMsg\");\n}\n","import { comparePassword, showMessage, resetField } from \"./pageLogic\";\nimport { loadFormPage, loadValidPage } from \"./DOMControl\";\nimport postCodeData from \"../item/postalCodes.json\" with { type: \"json\" };\n\nexport function changePostalFieldEvent() {\n  const countrySelect = document.querySelector(\"#user_country\");\n  const postalCodeInput = document.querySelector(\"#user_postalCode\");\n  const postalCodeMsg = document.querySelector(\"#user_postalCode + span\");\n\n  // Function: When the specific country in selection list is clicked, the post-code field can be input if the country has postal-code\n  countrySelect.addEventListener(\"change\", (event) => {\n    // Access the selected option's value of country\n    const selectedCountry = event.target;\n    const countryID = selectedCountry.selectedIndex;\n\n    if (postCodeData[countryID - 1][\"Format\"] === \"- no codes -\") {\n      postalCodeInput.disabled = true;\n      postalCodeInput.value = \"\";\n      postalCodeInput.placeholder =\n        \"The field is disbaled if selected country has no postal-code\";\n      postalCodeMsg.textContent = \"\";\n    } else {\n      postalCodeInput.disabled = false;\n      postalCodeInput.placeholder = \"\";\n    }\n  });\n}\n\nexport function addValidationFormEvent() {\n  const allFields = document.querySelectorAll(\"input, select\");\n  const validForm = document.querySelector(\"#validForm\");\n\n  allFields.forEach((fieldElement) => {\n    const fieldMessage = document.querySelector(`#${fieldElement.id} + span`);\n\n    // Function: If fields on the form lose focus, the form will validate the content in fields\n    fieldElement.addEventListener(\"blur\", () => {\n      showMessage(fieldElement, fieldMessage);\n    });\n\n    // Function: If fields on the form are input, the form will validate the content in fields\n    fieldElement.addEventListener(\"input\", () => {\n      showMessage(fieldElement, fieldMessage);\n    });\n  });\n\n  // Function: If the submit button on the form is clicked, the form will validate all fields to judge result\n  validForm.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n\n    let isFormValid = true;\n\n    allFields.forEach((fieldElement) => {\n      if (fieldElement.disabled) {\n        return;\n      }\n\n      const fieldMessage = document.querySelector(`#${fieldElement.id} + span`);\n\n      showMessage(fieldElement, fieldMessage);\n\n      if (!fieldElement.validity.valid || !comparePassword(fieldElement)) {\n        isFormValid = false;\n      }\n    });\n\n    // Function: If all fields pass the validation when form is submitted, the validation successful page will be loadeed\n    if (isFormValid) {\n      loadValidPage();\n      addSuccessPageEvent();\n    }\n  });\n\n  // Function: If the reset button on the form is clicked, the form will clear all fields and validation messages\n  validForm.addEventListener(\"reset\", (event) => {\n    event.preventDefault();\n\n    allFields.forEach((fieldElement) => {\n      const fieldMessage = document.querySelector(`#${fieldElement.id} + span`);\n\n      resetField(fieldElement, fieldMessage);\n    });\n  });\n}\n\nexport function addSuccessPageEvent() {\n  const restartBtn = document.querySelector(\"#restartBtn\");\n\n  // Function: If the restart button on the validation successful page is clicked, the form will be loadeed\n  restartBtn.addEventListener(\"click\", () => {\n    loadFormPage();\n    changePostalFieldEvent();\n    addValidationFormEvent();\n  });\n}\n","import \"./styles.css\";\nimport { loadInitialLayout, loadFormPage } from \"./function/DOMControl\";\nimport {\n  changePostalFieldEvent,\n  addValidationFormEvent,\n} from \"./function/eventHandler\";\n\n// Create the initial form page and add eventListners on the page\nloadInitialLayout();\nloadFormPage();\nchangePostalFieldEvent();\naddValidationFormEvent();\n","import highFive from \"../image/high-five.svg\";\n\nexport function createValidPage() {\n  const content = document.querySelector(\".content\");\n\n  const validPage = document.createElement(\"div\");\n  validPage.id = \"validPage\";\n\n  const successMsg = document.createElement(\"h1\");\n  successMsg.id = \"successMsg\";\n  successMsg.textContent = \"You sccessfully validate the form. Good job!\";\n\n  const successImg = document.createElement(\"img\");\n  successImg.id = \"successImg\";\n  successImg.src = highFive;\n  successImg.alt = \"high-five\";\n\n  const restartBtn = document.createElement(\"button\");\n  restartBtn.id = \"restartBtn\";\n  restartBtn.textContent = \"Try the validation again\";\n\n  validPage.append(successMsg, successImg, restartBtn);\n  content.appendChild(validPage);\n}\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","clearContent","content","querySelector","firstChild","removeChild","loadFormPage","validForm","createElement","id","noValidate","formHeader","textContent","emailField","emailLabel","setAttribute","emailInput","type","name","placeholder","autocomplete","required","emailMessage","classList","add","append","countryField","countryLabel","countrySelect","countrySelectOptText","value","disabled","selected","appendChild","countryMessage","postalCodeField","postalCodeLabel","postalCodeInput","postalCodeMessage","passwordField","passwordLabel","passwordInput","minLength","maxLength","passwordMessage","confirmField","confirmLabel","confirmInput","confirmMessage","buttonSet","submitBtn","autofocus","resetBtn","createValidForm","forEach","countryInfo","countryOption","addCountryOption","comparePassword","fieldElement","passwordValue","showMessage","fieldMessage","countryID","selectedIndex","validity","valid","remove","showCorrect","valueMissing","typeMismatch","tooShort","tooLong","patternMismatch","showError","changePostalFieldEvent","postalCodeMsg","addEventListener","event","target","main","body","loadInitialLayout","addValidationFormEvent","allFields","querySelectorAll","preventDefault","isFormValid","validPage","successMsg","successImg","alt","restartBtn","createValidPage","options","resetField"],"sourceRoot":""}